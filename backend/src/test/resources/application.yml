server:
  port: 2424

#------------------------------CABINET------------------------------
cabinet:
  production: false # 배포 환경에서는 true
  server:
    fe-host: http://localhost
    be-host: http://localhost
  #------------------------------JWT, TOKEN------------------------------
  jwt:
    jwt-secret-key: JWT_SECRET_KEY_JWT_SECRET_KEY_JWT_SECRET_KEY_JWT_SECRET_KEY_JWT_SECRET_KEY
    token:
      main-token-name: access_token
      admin-token-name: admin_access_token
      expiry: 28 #days
      main-provider: ft
      admin-provider: google
  #------------------------------DOMAIN, URL------------------------------
  domain-name:
    cookie-domain: cabi.42seoul.io
    local: localhost
    dev: dev.cabi.42seoul.io
    main: cabi.42seoul.io
    admin-email: gmail.com
    user-email: student.42seoul.kr
  #------------------------------MASTER------------------------------
  master:
    id: master_id
    password: master_password
    domain: cabi.42seoul.io
    email: ${cabinet.master.id}@${cabinet.master.domain}
  #------------------------------OAUTH 2.0------------------------------
  oauth2:
    client:
      registration:
        google:
          name: google
          grant-type: code
          token-grant-type: authorization_code
          access-token-name: access_token
          scope: email
        ft:
          name: ft
          grant-type: code
          token-grant-type: authorization_code
          access-token-name: access_token
          scope: public
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://accounts.google.com/o/oauth2/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          ft:
            authorization-uri: https://api.intra.42.fr/oauth/authorize
            token-uri: https://api.intra.42.fr/oauth/token
            user-info-uri: https://api.intra.42.fr/v2/me
            users-info-uri: https://api.intra.42.fr/v2/users
    urls:
      admin-login-callback: ${cabinet.server.be-host}/v4/admin/auth/login/callback
      user-login-callback: ${cabinet.server.be-host}/v4/auth/login/callback
    auth:
      ft:
        client-id: ft-client-id
        client-secret: ft-client-secret
      google:
        client-id: google-client-id
        client-secret: google-client-secret
  #------------------------------HANE------------------------------
  hane:
    url: https://hane-api/blabla
    token: hane-token-hane-token-hane-token-hane-token-hane-token-hane-token
    limit-hours: 432000
  #------------------------------FCM Message------------------------------
  fcm:
    lentSuccess:
      template: "%s 자리의 사물함 대여에 성공했습니다."
    soonOverdue:
      template: "사물함 대여 기간이 %d일 남았습니다."
    overdue:
      template: "대여한 사물함이 %d일 연체되었습니다."
    extensionIssuance:
      template: "%d일 짜리 %s 연장권이 발급 되었습니다."
    extensionExpiration:
      template: "%s 연장권이 %t일에 만료됩니다."
    announcement:
      template: "새로운 공지사항이 있으니 확인해주세요."
  #------------------------------SCHEDULE------------------------------
  schedule:
    cron:
      leave-absence: 0 0 0 * * * # 매일 0시 0분 0초
      risk-of-blackhole: 0 42 0 * * MON # 매주 월요일 0시 42분 0초
      no-risk-of-blackhole: 0 42 1 1 * * # 매월 1일 1시 42분 0초
      extensible-user-check: 0 0 0 2 * * # 매월 2일 0시 0분 0초
      cabinet-release-time: 0 */5 * * * * # 5분마다
      extension-delete-time: 0 */5 * * * * # 5분마다
      extension-issue-time: 0 0 0 2 * * # 매월 2일 0시 0분 0초
  #------------------------------CABINET POLICY------------------------------
  policy:
    in-session:
      term: 1
    lent:
      term:
        private: 31
        share-basic: 30
        share: 25
        extend: 31
      limit:
        share:
          min-user-count: 2
          max-user-count: 4
          max-attempt-count: 3
    penalty:
      day:
        share: 3
        padding: 2
  #------------------------------ALARM------------------------------
  alarm:
    #------------------------------FCM Message------------------------------
    fcm:
      lentSuccess:
        template: "%s 자리의 사물함 대여에 성공했습니다."
      soonOverdue:
        template: "사물함 대여 기간이 %d일 남았습니다."
      overdue:
        template: "대여한 사물함이 %d일 연체되었습니다."
      extensionIssuance:
        template: "%d일 짜리 %s 연장권이 발급 되었습니다."
      extensionExpiration:
        template: "%s 연장권이 %t일에 만료됩니다."
      announcement:
        template: "새로운 공지사항이 있으니 확인해주세요."
    mail:
      display-sender-name: "Cabi"
      lentSuccess:
        template: "mail/lentsuccess"
        subject: "Cabi 사물함 대여 성공 알림"
      soonOverdue:
        term: -1
        template: "mail/soonoverdue"
        subject: "Cabi 사물함 연체 예정 알림"
      overdue:
        template: "mail/overdue"
        subject: "Cabi 사물함 연체 알림"
      extensionIssuance:
        template: "mail/extensionIssuance"
        subject: "Cabi 사물함 연장권 발급 알림"
      extensionExpiration:
        term: -1
        template: "mail/extensionExpiration"
        subject: "Cabi 사물함 연장권 만료 알림"
      announcement:
        template: "mail/announcement"
        subject: "Cabi 공지사항 안내"
    slack:
      lentSuccess:
        template: "%s 자리의 사물함 대여에 성공했습니다."
      soonOverdue:
        template: "사물함 대여 기간이 %d일 남았습니다."
      overdue:
        template: "대여한 사물함이 %d일 연체되었습니다."
      extensionIssuance:
        template: "%d일 짜리 %s 연장권이 발급 되었습니다."
      extensionExpiration:
        template: "%s 연장권이 %t일에 만료됩니다."
      announcement:
        template: "새로운 공지사항이 있으니 확인해주세요."

#------------------------------SPRING------------------------------
spring:
  redis:
    host: localhost
    port: 6379

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:;MODE=MySQL
    username: root
    password: test_password

  sql:
    init:
      mode: embedded

  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    properties:
      hibernate:
        globally_quoted_identifiers: true
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
    defer-datasource-initialization: true

  mail:
    host: smtp.gmail.com
    port: 587
    username: example@gmail.com
    password: example_password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

#------------------------------ACTUATOR------------------------------
management:
  server:
    port: 2424
  info:
    java:
      enabled: true
  health:
    mail:
      enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

#------------------------------WEBHOOK------------------------------
webhook:
  discord-admin: https://discord.com/api/webhooks/for-test

#------------------------------FIREBASE------------------------------
firebase:
  messaging:
    credentials:
      path: "/config/backend/src/test/resources/firebase-example.json"

#------------------------------SLACK------------------------------
slack:
  token:
    singing_secret: signing_secret
    bot-token: bot_token
    app-token: app_token
  channel:
    cabi: cabi_channel
    random: random_channel
