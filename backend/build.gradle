plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'org.ftclub'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    snippetsDir = file('build/generated-snippets')
    outputDocs = file('src/main/resources/static/docs')
}

configurations {
    asciidoctorExt
}

repositories {
    mavenCentral()
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.92' 참고 : https://junho85.pe.kr/2054
//     M1의 경우 i.n.r.d.DnsServerAddressStreamProviders에서 에러가 발생할 때 설치하는 라이브러리지만, 별개의 환경이므로 스킵합니다.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.9.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'org.json:json:20210307'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'org.modelmapper:modelmapper:3.1.1'
    testRuntimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    //JUnit4 추가
    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
}

/**
 * ext ~ bootJar까지는 asciidoctor를 이용하여
 * build/generated-snippets에 테스트 결과를 저장하고
 * bootJar를 실행하면 build/generated-snippets에 저장된
 * 테스트 결과를 static/docs에 저장합니다.
 */

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
}

asciidoctor {
    dependsOn test
    baseDirFollowsSourceDir()
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
    into file("${outputDocs}")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into '/static/docs'
    }
}